test:
  track:
    exp_name: &TEST_NAME "mobilev3_net_17"
    exp_save: &TEST_SAVE "logs"
    model:
      backbone:
        name: "AlexNet"
        AlexNet:
          pretrain_model_path: ""
      losses:
        names: []
      task_head:
        name: "DenseboxHead"
        DenseboxHead:
          total_stride: 8
          score_size: 17
          x_size: 260
          num_conv3x3: 3
          head_conv_bn: [False, False, True]
      task_model:
        name: "SiamTrack"
        SiamTrack:
           pretrain_model_path: "/home/yingkai/uav_control/src/track_demo/models/final_model.pkl"
          # pretrain_model_path: "/data/snapshots/nips_ab_backbone_vgg/epoch-19.pkl"
          # pretrain_model_path: "/home/fyk/ijcai2022/siam_fc_transformer3/snap/epoch-19.pkl"
    pipeline:
      name: "SiamFCppTracker"
      SiamFCppTracker:
        test_lr: 0.52
        window_influence: 0.21
        penalty_k: 0.04
        num_conv3x3: 3
    tester:
      names: ["GOT10kTester",]  # (VOTTester|GOT10kTester|LaSOTTester)
      GOT10kTester:
        exp_name: *TEST_NAME
        exp_save: *TEST_SAVE
        subsets: ["val"]  # (val|test)
        data_root: "/home/yingkai/mycode/mobile_v3net/dataset/fe_data"
        # data_root: "/data/fyk/cvprdata/"

        # data_root: "/home/fyk/event_sot/"
        # data_root: "/home/fyk/cvprdata/"
        device_num: 1
train:
  track:
    exp_name: &TRAIN_NAME "mobilev3_net1"
    exp_save: &TRAIN_SAVE "/data/snapshots"
    num_processes: 2
    model:
      backbone:
        name: "AlexNet"
        AlexNet:
          pretrain_model_path: "models/alexnet/alexnet-nopad-bn-md5_fa7cdefb48f41978cf35e8c4f1159cdc.pkl"
      losses:
        names: [
                "FocalLoss",
                #"SigmoidCrossEntropyRetina",
#                "SigmoidCrossEntropyCenterness",
                "IOULoss",]
        FocalLoss:
          name: "cls"
          weight: 1.0
          alpha: 0.25
          gamma: 2.0
        SigmoidCrossEntropyRetina:
          name: "cls"
          weight: 1.0
          alpha: 0.25
          gamma: 2.0
        SigmoidCrossEntropyCenterness:
          name: "ctr"
          weight: 1.0
        IOULoss:
          name: "reg"
          weight: 3.0
      task_head:
        name: "DenseboxHead"
        DenseboxHead:
          total_stride: 8
          score_size: 17
          x_size: 303
          num_conv3x3: 3
          head_conv_bn: [False, False, True]
      task_model:
        name: "SiamTrack"
        SiamTrack:
          pretrain_model_path: ""
          amp: &amp False # True to enable auto mixed precision training from pytorch>=1.6
# ==================================================
    data:
      exp_name: *TRAIN_NAME
      exp_save: *TRAIN_SAVE
      num_epochs: &NUM_EPOCHS 20
      minibatch: &MINIBATCH 128  # 64
      num_workers: 8
      nr_image_per_epoch: &NR_IMAGE_PER_EPOCH 300000
      pin_memory: false
      datapipeline:
        name: "RegularDatapipeline"
      sampler:
        name: "TrackPairSampler"
        TrackPairSampler:
          negative_pair_ratio: 0.0
        submodules:
          dataset:
            names: ["GOT10kDataset",]  # (GOT10kDataset|LaSOTDataset)
            GOT10kDataset: &GOT10KDATASET_CFG
              ratio: 1.0
              max_diff: 60
              # dataset_root: "/data1/fyk/vis_event/"
              dataset_root: "/data1/fyk/cvprdata/"
              # dataset_root: "/home/fyk/cvprdata/"
              subset: "train"
          filter:
            name: "TrackPairFilter"
            TrackPairFilter:
              max_area_rate: 0.6
              min_area_rate: 0.001
              max_ratio: 10
      transformer:
        names: ["RandomCropTransformer", ]
        RandomCropTransformer:
          max_scale: 0.3
          max_shift: 0.4
          x_size: 260
      target:
        name: "DenseboxTarget"
        DenseboxTarget:
          total_stride: 8
          score_size: 17
          x_size: 260
          num_conv3x3: 3
    trainer:
      name: "RegularTrainer"
      RegularTrainer:
        exp_name: *TRAIN_NAME
        exp_save: *TRAIN_SAVE
        max_epoch: *NUM_EPOCHS
        minibatch: *MINIBATCH
        nr_image_per_epoch: *NR_IMAGE_PER_EPOCH
        snapshot: ""
      monitors:
        names: ["TextInfo", "TensorboardLogger"]
        TextInfo:
          {}
        TensorboardLogger:
          exp_name: *TRAIN_NAME
          exp_save: *TRAIN_SAVE

#    trainer:
#      name: "DistributedRegularTrainer"
#      DistributedRegularTrainer:
#        exp_name: *TRAIN_NAME
#        exp_save: *TRAIN_SAVE
#        max_epoch: *NUM_EPOCHS
#        minibatch: *MINIBATCH
#        nr_image_per_epoch: *NR_IMAGE_PER_EPOCH
#        snapshot: ""
#      monitors:
#        names: ["TextInfo"]  # "TensorboardLogger"
#        TextInfo:
#          {}
#        TensorboardLogger:
#          exp_name: *TRAIN_NAME
#          exp_save: *TRAIN_SAVE

# ==================================================
    optim:
      optimizer:
        name: "SGD"
        SGD:
          # to adjust learning rate, please modify "start_lr" and "end_lr" in lr_policy module bellow
          momentum: 0.9
          weight_decay: 0.00005
          minibatch: *MINIBATCH
          nr_image_per_epoch: *NR_IMAGE_PER_EPOCH
          lr_policy:
          - >
            {
            "name": "LinearLR",
            "start_lr": 0.000001,
            "end_lr": 0.08,
            "max_epoch": 1
            }
          - >
            {
            "name": "CosineLR",
            "start_lr": 0.08,
            "end_lr": 0.000001,
            "max_epoch": 19
            }
          lr_multiplier:
          - >
            {
            "name": "res",
            "regex": "basemodel",
            "ratio": 0.1
            }
          - >
            {
            "name": "other",
            "regex": "^((?!basemodel).)*$",
            "ratio": 1
            }
#      grad_modifier:
#        name: "DynamicFreezer"
#        DynamicFreezer:
#          schedule:
#          - >
#            {
#            "name": "isConv",
#            "regex": "head.transformer.decoder.*",
#            "epoch": 0,
#            "freezed": true
#            }
#          - >
#            {
#            "name": "isConv5",
#            "regex": "head.transformer.decoder.*",
#            "epoch": 17,
#            "freezed": false
#            }
#          - >
#            {
#            "name": "other",
#            "regex": "^((?!head.transformer.decoder).)*$",
#            "epoch": 17,
#            "freezed": true
#            }
#          - >
#            {
#            "name": "other",
#            "regex": "head.box_head.*",
#            "epoch": 17,
#            "freezed": false
#            }
